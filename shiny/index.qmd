---
title: "2022 CFB Field Goals"
format: html
server: shiny
---

:::{.callout-note}
Last updated to include games through: `September 5, 2022`.
:::

```{r}
#| context: setup
#| warning: false
library(reactable)
library(dplyr)
library(scales)
library(stringr)
library(tidyverse)

# load data
fgs_clean <- read.csv('fgs_clean.csv')
team_info <- readRDS("team_info.RDS")
xp_player <- read.csv('ck_xp.csv')

# build pbp
fgs <- fgs_clean %>%
  mutate(
    Result = case_when(
      play_type == "Blocked Field Goal" ~ "Blocked",
      play_type == "Field Goal Missed" ~ "Missed",
      play_type == "Field Goal Good" ~ "Good",
      play_type == "Blocked Field Goal Touchdown" ~ "Blocked",
      TRUE ~ play_type
    ),
    Time = paste(
      sprintf('%02d', clock.minutes),
      ":",
      sprintf('%02d', clock.seconds),
      sep = ""
    ),
    `Pr` = scales::percent(fg_make_prob, accuracy = 0.1L),
    WPA = format(round(wpa, 2), nsmall = 2),
    EPA = format(round(EPA, 2), nsmall = 2),
    Offense = paste(pos_team, pos_team_score),
    Defense = paste(def_pos_team, def_pos_team_score)
  ) %>%
  rename(
    Score = Offense,
    Yds = yds_fg,
    QRT = period,
    Down = down,
    `Dist.` = distance,
    YTG = yards_to_goal
  ) %>%
  select(Week,
         Score,
         Defense,
         Down,
         `Dist.`,
         YTG,
         QRT,
         Time,
         Result,
         Yds,
         `Pr`,
         WPA,
         EPA) %>%
  arrange(-Week)

# fix kicker player name for leaderboard
fgs_lb <- fgs_clean %>%
  mutate(kicker_player_name = case_when(
    str_detect(kicker_player_name, 'M. Suarez') ~ 'Morgan Suarez',
    TRUE ~ kicker_player_name
  ))

# clutch kicks
fgs_clutch <- fgs_lb %>%
  mutate(diff = pos_team_score - def_pos_team_score) %>%
  filter((period == 4 |
            period == 5) & clock.minutes <= 2 & (diff > -4 & diff < 4)) %>%
  group_by(kicker_player_name, pos_team) %>%
  summarise(CFGM =  sum(fgm), CFGA = sum(fga))

# group by player and show leaderboard
by_kicker <- fgs_lb %>%
  group_by(kicker_player_name, pos_team) %>%
  summarise(Yds = sum(yds_fg))

# list and join data
fg_list <- list(by_kicker, fgs_clutch, xp_player) %>%
            reduce(full_join, by = 'kicker_player_name') %>%
            mutate(pos_team.x = if_else(is.na(pos_team.x), pos_team, pos_team.x)) %>%
           select(kicker_player_name,
                  pos_team.x,
                  kicking_fgm,
                  kicking_fga,
                  Yds,
                  CFGM, 
                  CFGA,
                  kicking_xpa,
                  kicking_xpm) %>%
            replace(is.na(.), 0) 

# add team info
team_info <- team_info %>%
  mutate(logo = purrr::map(logos, magrittr::extract2, 1),
         logo = as.character(logo))

# combine team info with list 
main <- fg_list %>% 
        inner_join(team_info, by = c("pos_team.x" = "school")) 
        
final <- main %>%
         rename(Player = kicker_player_name, TT = pos_team.x, Team = logo, XPA = kicking_xpa, XPM = kicking_xpm, FGM = kicking_fgm, FGA = kicking_fga) %>%
         mutate(`FG%` = if_else(FGA == 0, scales::percent(0), scales::percent(FGM / FGA, accuracy = 0.1L)), 
         `Yds/A` = if_else(FGA == 0, format(round(0)), format(round(Yds / FGA), nsmall = 1)),
         Pts = sum((FGM*3)+ XPM)) %>%
         select(Team, Player, TT, FGM, FGA, `FG%`, Pts, CFGM, CFGA, XPM, XPA) %>%
         arrange(-Pts)
```

::: {.panel-tabset}

### Leaderboard
```{r}
fluidPage(
  fluidRow(
    column(4,
      selectizeInput('school', 'School', c("All", unique((final$TT)
      )), multiple = FALSE),
)),
fluidRow(column(
  12,
  reactable::reactableOutput("lbtable")
)))
```


### Play-by-play
```{r}
fluidPage(fluidRow(
  column(4,
         selectInput('wk', 'Week', c("All", unique((fgs$Week)
         )), multiple = FALSE),),
  column(4,
         sliderInput(
           "fg_yds",
           "FG Length",
           min = 10,
           max = 70,
           value = c(10, 70)
         )),
  column(4,
         selectInput(
           'result', 'Result', c("All", unique((fgs$Result))), multiple = FALSE
         ),)
),
fluidRow(column(
  12,
  reactable::reactableOutput("pbptable")
)))
```

### About

Welcome! This project tracks the play-by-play of field goals during the 2022 college football season. The goal is to practice gathering data, communicating with data, and learning some things along the way.

A few beliefs about field goals:

-   a missed field goal is a turnover
-   6 points is greater than 3 points and 3 points is greater than 0 points
-   can't be a clutch kicker without clutch attempts

#### Glossary

-   `Pr`: kick probability, does NOT include weather or skill data, model is from cfbfastR
-   `WPA`: win probability added
-   `EPA`: expected points added
-   `YTG`: yards to goal (end zone)
-   `Yds/A`: yards per field goal attempt
-   `CFGM`: made **clutch** field goal defined as any field goal made in the 4th quarter or overtime with under two minutes remaining that could tie the game or take the lead.
-   `CFGM`: attempted **clutch** field goal defined as any field goal attempted in the 4th quarter or overtime with under two minutes remaining that could tie the game or take the lead.
-   `XPM`: made extra point
-   `XPA`: missed extra point


#### What this project includes: 

-   play-by-play for every field goal in college football for the 2022 FBS season
-   field goal leaderboard by team and player (kicker)

#### What it does NOT include:

-   any other play-by-play data or kicking data (no punts, extra points, kickoffs, or blocked returns)
-   any previous seasons of data (only 2022 right now)
-   any proprietary models (only raw observed data)
-   the leaderboard page is only for FBS schools 

* * * 

Built by [Chris Gallo](https://hellogallo.com) using [quarto](https://quarto.org/docs/websites), the [cfbfastR](https://github.com/sportsdataverse/cfbfastR) package, and [fly.io](https://fly.io/).


:::

```{r}
#| context: server
output$pbptable <- reactable::renderReactable({
  datafgs <- fgs
  if (!is.null(input$fg_yds)) {
    datafgs <- datafgs[datafgs$Yds >= input$fg_yds[1] &
                         datafgs$Yds <= input$fg_yds[2], ]
  }
  
  if (input$wk != "All") {
    datafgs <- datafgs[datafgs$Week == input$wk, ]
  }
  
  if (input$result != "All") {
    datafgs <- datafgs[datafgs$Result == input$result, ]
  }
  
  # remove nas
  datafgs = na.omit(datafgs)
  reactable(
    datafgs,
    searchable = TRUE,
    showPageSizeOptions = TRUE,
    striped = TRUE,
    highlight = TRUE,
    rownames = FALSE,
    style = list(fontSize = '11px'),
    defaultColDef = colDef(maxWidth = 60,),
    columns = list(
      Score = colDef(
        maxWidth = 140,
        # show score with defense under kicking team
        cell = function(value, index) {
          Defense <- datafgs$Defense[index]
          div(div(style = "font-weight: 600", value),
              div(style = "font-size: 11px", Defense))
        }
      ),
      Defense = colDef(show = FALSE)
    )
  )
})
output$lbtable <- reactable::renderReactable({
  datalb <- final
  
  if (input$school != "All") {
    datalb <- datalb[datalb$TT == input$school, ]
  }
  
  reactable(
    datalb,
    searchable = FALSE,
    showPageSizeOptions = TRUE,
    striped = TRUE,
    highlight = TRUE,
    defaultColDef = colDef(maxWidth = 70,),
    columns = list(
      Player = colDef(
        maxWidth = 135,
        cell = function(value, index) {
          TT <- datalb$TT[index]
          div(div(style = "font-weight: 600", value),
              div(style = "font-size: 0.75rem", TT))
        }
      ),
      TT = colDef(show = FALSE),
      Team = colDef(
        cell = function(value) {
          image <- img(src = value,
                       style = "height: 24px;",
                       alt = value)
          tagList(div(style = "display: inline-block; width: 45px;", image),
                  name = "",)
        }
      )
    )
  )
})
```
